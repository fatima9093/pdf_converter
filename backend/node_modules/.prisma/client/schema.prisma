// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  passwordHash     String?   @map("password_hash")
  role             Role      @default(USER)
  provider         Provider  @default(EMAIL)
  googleId         String?   @map("google_id")
  isBlocked        Boolean   @default(false) @map("is_blocked")
  lastLogin        DateTime? @map("last_login")
  totalConversions Int       @default(0) @map("total_conversions")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  sessions    Session[]
  conversions Conversion[]
  fileRecords FileRecord[] // Add this relation
  systemLogs  SystemLog[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enhanced Conversion model (for detailed tracking)
model Conversion {
  id                 String             @id @default(cuid())
  userId             String?            @map("user_id") // Optional for anonymous users
  originalFileName   String             @map("original_file_name")
  convertedFileName  String?            @map("converted_file_name")
  toolType           String             @map("tool_type")
  fileSize           Int                @map("file_size")
  status             ConversionStatus   @default(COMPLETED)
  processingLocation ProcessingLocation @map("processing_location")
  isAuthenticated    Boolean            @default(false) @map("is_authenticated")
  ipAddress          String?            @map("ip_address")
  userAgent          String?            @map("user_agent")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("conversions")
}

// NEW: FileRecord model matching your FileManagement component
model FileRecord {
  id                String     @id @default(cuid())
  filename          String
  fileType          FileType
  originalExtension String     @map("original_extension")
  uploadedById      String     @map("uploaded_by_id")
  uploadedAt        DateTime   @default(now()) @map("uploaded_at")
  status            FileStatus @default(PENDING)
  fileSize          Int        @map("file_size")
  downloadUrl       String?    @map("download_url")
  errorMessage      String?    @map("error_message")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  // Relations
  uploadedBy User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("file_records")
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  EMAIL
  GOOGLE
}

enum ConversionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProcessingLocation {
  FRONTEND
  BACKEND
}

// NEW: Enums for FileRecord
enum FileType {
  WORD
  EXCEL
  POWERPOINT
  PDF
  IMAGE
  OTHER
}

enum FileStatus {
  PENDING
  CONVERTING
  COMPLETED
  FAILED
}

// System Logs model for tracking system events, errors, and security alerts
model SystemLog {
  id        String      @id @default(cuid())
  type      LogType
  message   String
  details   String?
  userId    String?     @map("user_id")
  userEmail String?     @map("user_email")
  severity  LogSeverity
  ipAddress String?     @map("ip_address")
  userAgent String?     @map("user_agent")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("system_logs")
}

enum LogType {
  CONVERSION_ERROR
  LOGIN_FAILURE
  SYSTEM_ERROR
  SECURITY_ALERT
  USER_ACTION
  API_ERROR
}

enum LogSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Contact form submissions model
model Contact {
  id        String         @id @default(cuid())
  name      String
  surname   String
  email     String
  subject   ContactSubject
  message   String         @db.Text
  status    ContactStatus  @default(PENDING)
  response  String?        @db.Text
  ipAddress String?        @map("ip_address")
  userAgent String?        @map("user_agent")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  @@map("contacts")
}

enum ContactSubject {
  GENERAL
  BILLING
  SALES
  FEATURE
  PROBLEM
  PRIVACY
  OTHER
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
